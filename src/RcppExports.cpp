// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// dbscan
Rcpp::List dbscan(Rcpp::NumericMatrix const& m, int const min_pts, double const eps, size_t const max_bytes_per_batch);
RcppExport SEXP _cuml4r_dbscan(SEXP mSEXP, SEXP min_ptsSEXP, SEXP epsSEXP, SEXP max_bytes_per_batchSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix const& >::type m(mSEXP);
    Rcpp::traits::input_parameter< int const >::type min_pts(min_ptsSEXP);
    Rcpp::traits::input_parameter< double const >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< size_t const >::type max_bytes_per_batch(max_bytes_per_batchSEXP);
    rcpp_result_gen = Rcpp::wrap(dbscan(m, min_pts, eps, max_bytes_per_batch));
    return rcpp_result_gen;
END_RCPP
}
// kmeans
Rcpp::List kmeans(Rcpp::NumericMatrix const& m, int const k, int const max_iters);
RcppExport SEXP _cuml4r_kmeans(SEXP mSEXP, SEXP kSEXP, SEXP max_itersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix const& >::type m(mSEXP);
    Rcpp::traits::input_parameter< int const >::type k(kSEXP);
    Rcpp::traits::input_parameter< int const >::type max_iters(max_itersSEXP);
    rcpp_result_gen = Rcpp::wrap(kmeans(m, k, max_iters));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cuml4r_dbscan", (DL_FUNC) &_cuml4r_dbscan, 4},
    {"_cuml4r_kmeans", (DL_FUNC) &_cuml4r_kmeans, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_cuml4r(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
