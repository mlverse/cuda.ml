cmake_minimum_required(VERSION 3.8 FATAL_ERROR)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")

add_definitions(-DHAS_CUML)

# NOTE: at the moment only the `rapids_cuda_init_architectures` function
# from the rapids-cmake repo is used here, and the version from the 21.10
# branch of rapids-cmake works fine, regardless of which version of libcuml
# we are building with. However, if in future any cuml-version-specific
# function from rapids-cmake is used here, then we will need to make the
# GIT_TAG choice below dependent on the libcuml version.
include(FetchContent)
FetchContent_Declare(
  rapids-cmake
  GIT_REPOSITORY https://github.com/rapidsai/rapids-cmake.git
  GIT_TAG        origin/branch-21.10
  )
FetchContent_MakeAvailable(rapids-cmake)
include(rapids-cuda)

rapids_cuda_init_architectures(cuda.ml)
project(cuda.ml LANGUAGES CUDA CXX)

if(DEFINED ENV{CUML4R_ENABLE_CCACHE})
    find_program(CCACHE_FOUND ccache)
    if(CCACHE_FOUND)
        set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE "CCACHE_BASEDIR=${CMAKE_SOURCE_DIR} CCACHE_NOHASHDIR=true CCACHE_SLOPPINESS=include_file_ctime,include_file_mtime ccache")
    endif(CCACHE_FOUND)
endif(DEFINED ENV{CUML4R_ENABLE_CCACHE})

if(DEFINED CUML_INCLUDE_DIR)
    # CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES is needed so that cuda_runtime.h is found
    # CUML_INCLUDE_DIR is needed so that kmeans/kmeans_c.h is found
    set(CUML4R_INCLUDE_DIRS ${CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES} ${CUML_INCLUDE_DIR})
else()
    message(FATAL_ERROR "CUML_INCLUDE_DIR not specified.")
endif(DEFINED CUML_INCLUDE_DIR)
if(DEFINED CUML_LIB_DIR)
    # CUML_LIB_DIR point to the director where libcuml++.so lives
    link_directories(${CUML_LIB_DIR})
else()
    message(FATAL_ERROR "CUML_LIB_DIR not specified.")
endif(DEFINED CUML_LIB_DIR)

include_directories(@R_INCLUDE_DIR@)
include_directories(@RCPP_INCLUDE_DIR@)

include_directories(${TREELITE_C_API_INCLUDE_DIR})

if(DEFINED ENV{CUML4R_ENABLE_ASAN})
    if($ENV{CUML4R_ENABLE_ASAN} MATCHES "true")
        add_compile_options(-fno-omit-frame-pointer -fsanitize-recover=address)
    endif($ENV{CUML4R_ENABLE_ASAN} MATCHES "true")
endif(DEFINED ENV{CUML4R_ENABLE_ASAN})

add_library(
  cuda.ml
  SHARED
  # utils
  cuda_utils.cu
  cuml_utils.cpp
  device_allocator.cu
  fil_utils.cu
  handle_utils.cu
  stream_allocator.cu
  # models & algorithms
  agglomerative_clustering.cpp
  agglomerative_clustering.cu
  cd.cpp
  cd.cu
  cd_fit_impl.cu
  dbscan.cpp
  dbscan.cu
  fil.cpp
  fil.cu
  kmeans.cpp
  kmeans.cu
  knn.cpp
  knn.cu
  lm.cu
  lm_predict.cpp
  lm_predict.cu
  ols.cpp
  ols.cu
  ols_fit_impl.cu
  pca.cpp
  pca.cu
  qn.cpp
  qn.cu
  random_forest_classifier.cpp
  random_forest_classifier.cu
  random_forest_regressor.cpp
  random_forest_regressor.cu
  random_forest_serde.cu
  random_projection.cpp
  random_projection.cu
  ridge.cpp
  ridge.cu
  ridge_fit_impl.cu
  sgd.cpp
  sgd.cu
  sgd_fit_impl.cu
  svm_classifier.cpp
  svm_classifier.cu
  svm_regressor.cpp
  svm_regressor.cu
  svm_serde.cu
  tsne.cpp
  tsne.cu
  tsvd.cpp
  tsvd.cu
  umap.cpp
  umap.cu
  # Rcpp exports
  RcppExports.cpp
)

# Need to set linker language to CUDA to link the CUDA Runtime
set_target_properties(cuda.ml PROPERTIES LINKER_LANGUAGE "CUDA")
set_target_properties(cuda.ml PROPERTIES PREFIX "")

set(CUML4R_LIBS cuda.ml PRIVATE cuml++ cublas cusolver cudart cusparse)

find_package(Treelite)
if(Treelite_FOUND)
  set(CUML4R_LIBS ${CUML4R_LIBS} treelite::treelite treelite::treelite_runtime)
  set(CUML4R_INCLUDE_DIRS ${CUML4R_INCLUDE_DIRS} ${Treelite_INCLUDE_DIRS})
else()
  message(
    WARNING
    "
    Unable to locate 'TreeLite' using CMake. Forest Inference Library (FIL)
    functionalities from {cuda.ml} will be disabled!

    Please install the treelite C API and re-install {cuda.ml} if you want to
    enable FIL functionalities.
    "
  )
  set(
    CUML4R_INCLUDE_DIRS ${CUML4R_INCLUDE_DIRS} ${CUML_STUB_HEADERS_DIR}
  )
endif(Treelite_FOUND)

include_directories(${CUML4R_INCLUDE_DIRS})

set(CUML4R_ADDITIONAL_LINKER_FLAGS "")
if(DEFINED ENV{CUML4R_ENABLE_ASAN})
    if($ENV{CUML4R_ENABLE_ASAN} MATCHES "true")
        set(CUML4R_ADDITIONAL_LINKER_FLAGS -fno-omit-frame-pointer -fsanitize-recover=address)
    endif($ENV{CUML4R_ENABLE_ASAN} MATCHES "true")
endif(DEFINED ENV{CUML4R_ENABLE_ASAN})

# Link cuda.ml
target_link_libraries(${CUML4R_LIBS} ${CUML4R_ADDITIONAL_LINKER_FLAGS})
